import { NextRequest, NextResponse } from 'next/server';
import { cookies } from 'next/headers';

// Search queries for different moods
const MOOD_SEARCH_QUERIES = {
  happy: 'happy upbeat pop feel good',
  sad: 'sad emotional melancholy heartbreak',
  energetic: 'energetic workout rock electronic dance',
  chill: 'chill relaxing ambient indie acoustic',
  romantic: 'romantic love songs ballad slow'
} as const;

export async function POST(req: NextRequest) {
  try {
    const { mood } = await req.json();
    
    if (!mood || typeof mood !== 'string') {
      return NextResponse.json({ error: 'Invalid mood provided' }, { status: 400 });
    }

    // Get authentication token
    const cookieStore = await cookies();
    const access_token = cookieStore.get('access_token')?.value;
    
    if (!access_token) {
      return NextResponse.json({ error: 'Not authenticated' }, { status: 401 });
    }

    // Get user profile
    const userRes = await fetch('https://api.spotify.com/v1/me', {
      headers: { Authorization: `Bearer ${access_token}` },
    });
    
    if (!userRes.ok) {
      return NextResponse.json({ error: 'Failed to get user profile' }, { status: 500 });
    }
    
    const user = await userRes.json();

    // Search for tracks based on mood
    const searchQuery = MOOD_SEARCH_QUERIES[mood.toLowerCase() as keyof typeof MOOD_SEARCH_QUERIES] || 'popular music';
    
    const searchRes = await fetch(
      `https://api.spotify.com/v1/search?q=${encodeURIComponent(searchQuery)}&type=track&limit=20`,
      { headers: { Authorization: `Bearer ${access_token}` } }
    );

    if (!searchRes.ok) {
      return NextResponse.json({ error: 'Failed to search tracks' }, { status: 500 });
    }

    const searchData = await searchRes.json();
    const tracks = searchData.tracks.items;

    if (!tracks || tracks.length === 0) {
      return NextResponse.json({ error: 'No tracks found for this mood' }, { status: 500 });
    }

    // Create playlist
    const playlistName = `${mood.charAt(0).toUpperCase() + mood.slice(1)} Vibes`;
    const playlistRes = await fetch(
      `https://api.spotify.com/v1/users/${user.id}/playlists`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${access_token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: playlistName,
          description: `A curated playlist for your ${mood} mood - Generated by Moody`,
          public: false
        }),
      }
    );

    if (!playlistRes.ok) {
      return NextResponse.json({ error: 'Failed to create playlist' }, { status: 500 });
    }

    const playlist = await playlistRes.json();
    console.log('Created playlist:', playlist.id, playlist.name);

    // Add tracks to playlist
    const trackURIs = tracks.map((track: { uri: string }) => track.uri);
    console.log('Adding tracks to playlist:', trackURIs.length, 'tracks');
    
    const addRes = await fetch(
      `https://api.spotify.com/v1/playlists/${playlist.id}/tracks`,
      {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${access_token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ uris: trackURIs }),
      }
    );

    if (!addRes.ok) {
      console.error('Failed to add tracks, status:', addRes.status, await addRes.text());
      return NextResponse.json({ error: 'Failed to add tracks to playlist' }, { status: 500 });
    }

    const addResult = await addRes.json();
    console.log('Added tracks result:', addResult);

    return NextResponse.json({ 
      playlistId: playlist.id,
      name: playlistName,
      trackCount: tracks.length
    });

  } catch (error) {
    console.error('Playlist creation error:', error);
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
  }
}
